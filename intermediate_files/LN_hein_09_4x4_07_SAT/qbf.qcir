# Move variables: 
exists(1, 2, 3, 4)
forall(5, 6, 7, 8)
exists(9, 10, 11, 12)
forall(13, 14, 15, 16)
exists(17, 18, 19, 20)
forall(21, 22, 23, 24)
exists(25, 26, 27, 28)
# goal path variables: 
exists(49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64)
# Forall position variables: 
forall(29, 30, 31, 32)
# Predicate variables: 
exists(33, 34)
exists(35, 36)
exists(37, 38)
exists(39, 40)
exists(41, 42)
exists(43, 44)
exists(45, 46)
exists(47, 48)
# Exists neighbour variables: 
exists(65, 66, 67, 68)
output(387)
# ------------------------------------------------------------------------
# Transitions: 
# Player 1 (black) transition function for time step 0: 
# Equality gate for move and forall positional variables:
69 = or(-1, 29)
70 = or(-29, 1)
71 = and(69, 70)
72 = or(-2, 30)
73 = or(-30, 2)
74 = and(72, 73)
75 = or(-3, 31)
76 = or(-31, 3)
77 = and(75, 76)
78 = or(-4, 32)
79 = or(-32, 4)
80 = and(78, 79)
81 = and(71, 74, 77, 80)
# Choosing black position constraints:
# In time step i, occupied must be false:
# In time step i+1, occupied must be true and color must be black (i.e., 0):
82 = and(-33, 35, -36)
# If time and equality constraints hold then choosing black constraints must be true:
83 = or(-81, 82)
# propagation constraints:
84 = or(-33, 35)
85 = or(-35, 33)
86 = and(84, 85)
87 = or(-34, 36)
88 = or(-36, 34)
89 = and(87, 88)
90 = and(86, 89)
# If the time and equality constraints does not hold predicates are propagated:
91 = or(81, 90)
# Player 2 (white) transition function for time step 1: 
# Equality gate for move and forall positional variables:
92 = or(-5, 29)
93 = or(-29, 5)
94 = and(92, 93)
95 = or(-6, 30)
96 = or(-30, 6)
97 = and(95, 96)
98 = or(-7, 31)
99 = or(-31, 7)
100 = and(98, 99)
101 = or(-8, 32)
102 = or(-32, 8)
103 = and(101, 102)
104 = and(94, 97, 100, 103)
# In time step i, occupied must be false:
105 = and(104, -35)
# Choosing white position constraints:
# In time step i+1, occupied must be true and color must be white (i.e., 1):
106 = and(37, 38)
# If time and equality constraints hold then choosing white constraints must be true:
107 = or(-105, 106)
# propagation constraints:
108 = or(-35, 37)
109 = or(-37, 35)
110 = and(108, 109)
111 = or(-36, 38)
112 = or(-38, 36)
113 = and(111, 112)
114 = and(110, 113)
# If the time and equality constraints does not hold predicates are propagated:
115 = or(105, 114)
# Player 1 (black) transition function for time step 2: 
# Equality gate for move and forall positional variables:
116 = or(-9, 29)
117 = or(-29, 9)
118 = and(116, 117)
119 = or(-10, 30)
120 = or(-30, 10)
121 = and(119, 120)
122 = or(-11, 31)
123 = or(-31, 11)
124 = and(122, 123)
125 = or(-12, 32)
126 = or(-32, 12)
127 = and(125, 126)
128 = and(118, 121, 124, 127)
# Choosing black position constraints:
# In time step i, occupied must be false:
# In time step i+1, occupied must be true and color must be black (i.e., 0):
129 = and(-37, 39, -40)
# If time and equality constraints hold then choosing black constraints must be true:
130 = or(-128, 129)
# propagation constraints:
131 = or(-37, 39)
132 = or(-39, 37)
133 = and(131, 132)
134 = or(-38, 40)
135 = or(-40, 38)
136 = and(134, 135)
137 = and(133, 136)
# If the time and equality constraints does not hold predicates are propagated:
138 = or(128, 137)
# Player 2 (white) transition function for time step 3: 
# Equality gate for move and forall positional variables:
139 = or(-13, 29)
140 = or(-29, 13)
141 = and(139, 140)
142 = or(-14, 30)
143 = or(-30, 14)
144 = and(142, 143)
145 = or(-15, 31)
146 = or(-31, 15)
147 = and(145, 146)
148 = or(-16, 32)
149 = or(-32, 16)
150 = and(148, 149)
151 = and(141, 144, 147, 150)
# In time step i, occupied must be false:
152 = and(151, -39)
# Choosing white position constraints:
# In time step i+1, occupied must be true and color must be white (i.e., 1):
153 = and(41, 42)
# If time and equality constraints hold then choosing white constraints must be true:
154 = or(-152, 153)
# propagation constraints:
155 = or(-39, 41)
156 = or(-41, 39)
157 = and(155, 156)
158 = or(-40, 42)
159 = or(-42, 40)
160 = and(158, 159)
161 = and(157, 160)
# If the time and equality constraints does not hold predicates are propagated:
162 = or(152, 161)
# Player 1 (black) transition function for time step 4: 
# Equality gate for move and forall positional variables:
163 = or(-17, 29)
164 = or(-29, 17)
165 = and(163, 164)
166 = or(-18, 30)
167 = or(-30, 18)
168 = and(166, 167)
169 = or(-19, 31)
170 = or(-31, 19)
171 = and(169, 170)
172 = or(-20, 32)
173 = or(-32, 20)
174 = and(172, 173)
175 = and(165, 168, 171, 174)
# Choosing black position constraints:
# In time step i, occupied must be false:
# In time step i+1, occupied must be true and color must be black (i.e., 0):
176 = and(-41, 43, -44)
# If time and equality constraints hold then choosing black constraints must be true:
177 = or(-175, 176)
# propagation constraints:
178 = or(-41, 43)
179 = or(-43, 41)
180 = and(178, 179)
181 = or(-42, 44)
182 = or(-44, 42)
183 = and(181, 182)
184 = and(180, 183)
# If the time and equality constraints does not hold predicates are propagated:
185 = or(175, 184)
# Player 2 (white) transition function for time step 5: 
# Equality gate for move and forall positional variables:
186 = or(-21, 29)
187 = or(-29, 21)
188 = and(186, 187)
189 = or(-22, 30)
190 = or(-30, 22)
191 = and(189, 190)
192 = or(-23, 31)
193 = or(-31, 23)
194 = and(192, 193)
195 = or(-24, 32)
196 = or(-32, 24)
197 = and(195, 196)
198 = and(188, 191, 194, 197)
# In time step i, occupied must be false:
199 = and(198, -43)
# Choosing white position constraints:
# In time step i+1, occupied must be true and color must be white (i.e., 1):
200 = and(45, 46)
# If time and equality constraints hold then choosing white constraints must be true:
201 = or(-199, 200)
# propagation constraints:
202 = or(-43, 45)
203 = or(-45, 43)
204 = and(202, 203)
205 = or(-44, 46)
206 = or(-46, 44)
207 = and(205, 206)
208 = and(204, 207)
# If the time and equality constraints does not hold predicates are propagated:
209 = or(199, 208)
# Player 1 (black) transition function for time step 6: 
# Equality gate for move and forall positional variables:
210 = or(-25, 29)
211 = or(-29, 25)
212 = and(210, 211)
213 = or(-26, 30)
214 = or(-30, 26)
215 = and(213, 214)
216 = or(-27, 31)
217 = or(-31, 27)
218 = and(216, 217)
219 = or(-28, 32)
220 = or(-32, 28)
221 = and(219, 220)
222 = and(212, 215, 218, 221)
# Choosing black position constraints:
# In time step i, occupied must be false:
# In time step i+1, occupied must be true and color must be black (i.e., 0):
223 = and(-45, 47, -48)
# If time and equality constraints hold then choosing black constraints must be true:
224 = or(-222, 223)
# propagation constraints:
225 = or(-45, 47)
226 = or(-47, 45)
227 = and(225, 226)
228 = or(-46, 48)
229 = or(-48, 46)
230 = and(228, 229)
231 = and(227, 230)
# If the time and equality constraints does not hold predicates are propagated:
232 = or(222, 231)
# Final transition gate: 
233 = and(83, 91, 107, 115, 130, 138, 154, 162, 177, 185, 201, 209, 224, 232)
# ------------------------------------------------------------------------
# Initial state: 
# In all branches the occupied is 0: 
# ------------------------------------------------------------------------
# Goal state: 
# Specifying neighbours: 
234 = and(-29, -30, -31, -32)
# neighbour clauses: 
235 = and(-65, 66, -67, -68)
236 = and(-65, -66, -67, 68)
237 = and(-65, -66, 67, 68)
238 = or(235, 236, 237)
# if then clause : 
239 = or(-234, 238)
240 = and(-29, -30, -31, 32)
# neighbour clauses: 
241 = and(-65, 66, -67, 68)
242 = and(-65, -66, -67, -68)
243 = and(-65, -66, 67, -68)
244 = or(241, 242, 243, 235)
# if then clause : 
245 = or(-240, 244)
246 = and(-29, -30, 31, -32)
# neighbour clauses: 
# if then clause : 
247 = or(-246, 243)
248 = and(-29, -30, 31, 32)
# neighbour clauses: 
249 = or(235, 242)
# if then clause : 
250 = or(-248, 249)
251 = and(-29, 30, -31, -32)
# neighbour clauses: 
252 = and(-65, 66, 67, 68)
253 = and(-65, 66, 67, -68)
254 = or(242, 252, 237, 241, 236, 253)
# if then clause : 
255 = or(-251, 254)
256 = and(-29, 30, -31, 32)
# neighbour clauses: 
257 = and(65, -66, -67, -68)
258 = or(236, 257, 235, 243, 252)
# if then clause : 
259 = or(-256, 258)
260 = and(-29, 30, 31, -32)
# neighbour clauses: 
261 = or(252, 235)
# if then clause : 
262 = or(-260, 261)
263 = and(-29, 30, 31, 32)
# neighbour clauses: 
264 = and(65, -66, -67, 68)
265 = or(235, 264, 257, 253, 241)
# if then clause : 
266 = or(-263, 265)
267 = and(29, -30, -31, -32)
# neighbour clauses: 
# if then clause : 
268 = or(-267, 257)
269 = and(29, -30, -31, 32)
# neighbour clauses: 
# if then clause : 
270 = or(-269, 264)
# Constratins for position 0 :
# Equality clause for the current path variables and forall position variables: 
271 = or(-49, 29)
272 = or(-29, 49)
273 = and(271, 272)
274 = or(-50, 30)
275 = or(-30, 50)
276 = and(274, 275)
277 = or(-51, 31)
278 = or(-31, 51)
279 = and(277, 278)
280 = or(-52, 32)
281 = or(-32, 52)
282 = and(280, 281)
283 = and(273, 276, 279, 282)
# Equality clause for the neighbour path variables and neighbour variables: 
284 = or(-53, 65)
285 = or(-65, 53)
286 = and(284, 285)
287 = or(-54, 66)
288 = or(-66, 54)
289 = and(287, 288)
290 = or(-55, 67)
291 = or(-67, 55)
292 = and(290, 291)
293 = or(-56, 68)
294 = or(-68, 56)
295 = and(293, 294)
296 = and(286, 289, 292, 295)
297 = or(-283, 296)
# The goal position is occupied and the color is black: 
298 = and(47, -48)
# if then clause : 
299 = or(-283, 298)
# Constratins for position 1 :
# Equality clause for the current path variables and forall position variables: 
300 = or(-53, 29)
301 = or(-29, 53)
302 = and(300, 301)
303 = or(-54, 30)
304 = or(-30, 54)
305 = and(303, 304)
306 = or(-55, 31)
307 = or(-31, 55)
308 = and(306, 307)
309 = or(-56, 32)
310 = or(-32, 56)
311 = and(309, 310)
312 = and(302, 305, 308, 311)
# Equality clause for the neighbour path variables and neighbour variables: 
313 = or(-57, 65)
314 = or(-65, 57)
315 = and(313, 314)
316 = or(-58, 66)
317 = or(-66, 58)
318 = and(316, 317)
319 = or(-59, 67)
320 = or(-67, 59)
321 = and(319, 320)
322 = or(-60, 68)
323 = or(-68, 60)
324 = and(322, 323)
325 = and(315, 318, 321, 324)
326 = or(-312, 325)
# The goal position is occupied and the color is black: 
# if then clause : 
327 = or(-312, 298)
# Constratins for position 2 :
# Equality clause for the current path variables and forall position variables: 
328 = or(-57, 29)
329 = or(-29, 57)
330 = and(328, 329)
331 = or(-58, 30)
332 = or(-30, 58)
333 = and(331, 332)
334 = or(-59, 31)
335 = or(-31, 59)
336 = and(334, 335)
337 = or(-60, 32)
338 = or(-32, 60)
339 = and(337, 338)
340 = and(330, 333, 336, 339)
# Equality clause for the neighbour path variables and neighbour variables: 
341 = or(-61, 65)
342 = or(-65, 61)
343 = and(341, 342)
344 = or(-62, 66)
345 = or(-66, 62)
346 = and(344, 345)
347 = or(-63, 67)
348 = or(-67, 63)
349 = and(347, 348)
350 = or(-64, 68)
351 = or(-68, 64)
352 = and(350, 351)
353 = and(343, 346, 349, 352)
354 = or(-340, 353)
# The goal position is occupied and the color is black: 
# if then clause : 
355 = or(-340, 298)
# Constratins for position 3 :
# Equality clause for the current path variables and forall position variables: 
356 = or(-61, 29)
357 = or(-29, 61)
358 = and(356, 357)
359 = or(-62, 30)
360 = or(-30, 62)
361 = and(359, 360)
362 = or(-63, 31)
363 = or(-31, 63)
364 = and(362, 363)
365 = or(-64, 32)
366 = or(-32, 64)
367 = and(365, 366)
368 = and(358, 361, 364, 367)
# The goal position is occupied and the color is black: 
# if then clause : 
369 = or(-368, 298)
# Start boarder clauses : 
370 = and(-49, -50, 51, 52)
371 = and(-49, 50, 51, -52)
# disjunction of all start boarder positions : 
372 = or(370, 371)
# End boarder clauses : 
373 = and(-61, -62, 63, -64)
374 = and(61, -62, -63, -64)
375 = and(61, -62, -63, 64)
# disjunction of all end boarder positions : 
376 = or(373, 374, 375)
# Final and gate for goal constraints: 
377 = and(239, 245, 247, 250, 255, 259, 262, 266, 268, 270, 297, 299, 326, 327, 354, 355, 369, 372, 376)
# ------------------------------------------------------------------------
# Restricted black moves: 
378 = and(1, -2, -3)
379 = or(-1, 378)
380 = and(9, -10, -11)
381 = or(-9, 380)
382 = and(17, -18, -19)
383 = or(-17, 382)
384 = and(25, -26, -27)
385 = or(-25, 384)
# And gate for all restricted black move clauses: 
386 = and(379, 381, 383, 385)
# ------------------------------------------------------------------------
# Final gate: 
# Conjunction of Initial gate and Transition gate and Goal gate: 
387 = and(386, -33, 233, 377)
